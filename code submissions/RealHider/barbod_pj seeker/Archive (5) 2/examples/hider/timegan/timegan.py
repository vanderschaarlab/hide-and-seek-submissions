"""Time-series Generative Adversarial Networks (TimeGAN) Codebase.
    
    Reference: Jinsung Yoon, Daniel Jarrett, Mihaela van der Schaar,
    "Time-series Generative Adversarial Networks,"
    Neural Information Processing Systems (NeurIPS), 2019.
    
    Paper link: https://papers.nips.cc/paper/8789-time-series-generative-adversarial-networks
    
    Last updated Date: April 24th 2020
    Code author: Jinsung Yoon (jsyoon0823@gmail.com)
    
    -----------------------------
    
    timegan.py
    
    Note: Use original data as training set to generator synthetic data (time-series)
    """

# Necessary Packages
import tensorflow as tf
import numpy as np
import time
from .utils import (  # pylint: disable=relative-beyond-top-level
                    extract_time,
                    rnn_cell,
                    random_generator,
                    batch_generator,
                    )



def timegan (ori_data):
  """TimeGAN function.
  
  Use original data as training set to generater synthetic data (time-series)
  
  Args:
    - ori_data: original time-series data
    - parameters: TimeGAN network parameters
    
  Returns:
    - generated_data: generated time-series data
  """
  start = time.time()
  parameters = dict()  
  parameters['module'] = 'gru'
  parameters['hidden_dim'] = 24
  parameters['num_layer'] = 3
  parameters['iterations'] = 10000
  parameters['batch_size'] = 256
  
  # Initialization on the Graph
  tf.reset_default_graph()

  # Basic Parameters
  no, seq_len, dim = np.asarray(ori_data).shape
    
  # Maximum sequence length and each sequence length
  ori_time, max_seq_len = extract_time(ori_data)
  
  def MinMaxScaler(data):
    """Min-Max Normalizer.
    
    Args:
      - data: raw data
      
    Returns:
      - norm_data: normalized data
      - min_val: minimum values (for renormalization)
      - max_val: maximum values (for renormalization)
    """    
    min_val = np.min(np.min(data, axis = 0), axis = 0)
    data = data - min_val
      
    max_val = np.max(np.max(data, axis = 0), axis = 0)
    norm_data = data / (max_val + 1e-7)
      
    return norm_data, min_val, max_val
  
  # Normalization
  ori_data, min_val, max_val = MinMaxScaler(ori_data)
              
  ## Build a RNN networks          
  
  # Network Parameters
  hidden_dim   = parameters['hidden_dim'] 
  num_layers   = parameters['num_layer']
  iterations   = parameters['iterations']
  batch_size   = parameters['batch_size']
  module_name  = parameters['module'] 
  z_dim        = dim
  gamma        = 1
    
  # Input place holders
  X = tf.placeholder(tf.float32, [None, max_seq_len, dim], name = "myinput_x")
  Z = tf.placeholder(tf.float32, [None, max_seq_len, z_dim], name = "myinput_z")
  T = tf.placeholder(tf.int32, [None], name = "myinput_t")
  
  def embedder (X, T):
    """Embedding network between original feature space to latent space.
    
    Args:
      - X: input time-series features
      - T: input time information
      
    Returns:
      - H: embeddings
    """
    with tf.variable_scope("embedder", reuse = tf.AUTO_REUSE):
      e_cell = tf.nn.rnn_cell.MultiRNNCell([rnn_cell(module_name, hidden_dim) for _ in range(num_layers)])
      e_outputs, e_last_states = tf.nn.dynamic_rnn(e_cell, X, dtype=tf.float32, sequence_length = T)
      H = tf.contrib.layers.fully_connected(e_outputs, hidden_dim, activation_fn=tf.nn.sigmoid)     
    return H
      
  def recovery (H, T):   
    """Recovery network from latent space to original space.
    
    Args:
      - H: latent representation
      - T: input time information
      
    Returns:
      - X_tilde: recovered data
    """     
    with tf.variable_scope("recovery", reuse = tf.AUTO_REUSE):       
      r_cell = tf.nn.rnn_cell.MultiRNNCell([rnn_cell(module_name, hidden_dim) for _ in range(num_layers)])
      r_outputs, r_last_states = tf.nn.dynamic_rnn(r_cell, H, dtype=tf.float32, sequence_length = T)
      X_tilde = tf.contrib.layers.fully_connected(r_outputs, dim, activation_fn=None)
    return X_tilde
    
  def generator (Z, T):  
    """Generator function: Generate time-series data in latent space.
    
    Args:
      - Z: random variables
      - T: input time information
      
    Returns:
      - E: generated embedding
    """        
    with tf.variable_scope("generator", reuse = tf.AUTO_REUSE):
      e_cell = tf.nn.rnn_cell.MultiRNNCell([rnn_cell(module_name, hidden_dim) for _ in range(num_layers)])
      e_outputs, e_last_states = tf.nn.dynamic_rnn(e_cell, Z, dtype=tf.float32, sequence_length = T)
      E = tf.contrib.layers.fully_connected(e_outputs, hidden_dim, activation_fn=tf.nn.sigmoid)     
    return E
      
  def supervisor (H, T): 
    """Generate next sequence using the previous sequence.
    
    Args:
      - H: latent representation
      - T: input time information
      
    Returns:
      - S: generated sequence based on the latent representations generated by the generator
    """          
    with tf.variable_scope("supervisor", reuse = tf.AUTO_REUSE):
      e_cell = tf.nn.rnn_cell.MultiRNNCell([rnn_cell(module_name, hidden_dim) for _ in range(num_layers-1)])
      e_outputs, e_last_states = tf.nn.dynamic_rnn(e_cell, H, dtype=tf.float32, sequence_length = T)
      S = tf.contrib.layers.fully_connected(e_outputs, hidden_dim, activation_fn=tf.nn.sigmoid)     
    return S
          
  def discriminator (H, T):
    """Discriminate the original and synthetic time-series data.
    
    Args:
      - H: latent representation
      - T: input time information
      
    Returns:
      - Y_hat: classification results between original and synthetic time-series
    """        
    with tf.variable_scope("discriminator", reuse = tf.AUTO_REUSE):
      d_cell = tf.nn.rnn_cell.MultiRNNCell([rnn_cell(module_name, hidden_dim) for _ in range(num_layers)])
      d_outputs, d_last_states = tf.nn.static_rnn(d_cell, [H[:, i, :] for i in range(max_seq_len)], dtype=tf.float32, sequence_length = T)
      Y_hat = tf.contrib.layers.fully_connected(d_outputs, 1, activation_fn=None) 
    return Y_hat   
    
  # Embedder & Recovery
  H = embedder(X, T)
  X_tilde = recovery(H, T)
    
  # Generator
  E_hat = generator(Z, T)
  H_hat = supervisor(E_hat, T)
  H_hat_supervise = supervisor(H, T)
    
  # Synthetic data
  X_hat = recovery(H_hat, T)
    
  # Discriminator
  Y_fake = discriminator(H_hat, T)
  Y_real = discriminator(H, T)     
  Y_fake_e = discriminator(E_hat, T)
    
  # Variables        
  e_vars = [v for v in tf.trainable_variables() if v.name.startswith('embedder')]
  r_vars = [v for v in tf.trainable_variables() if v.name.startswith('recovery')]
  g_vars = [v for v in tf.trainable_variables() if v.name.startswith('generator')]
  s_vars = [v for v in tf.trainable_variables() if v.name.startswith('supervisor')]
  d_vars = [v for v in tf.trainable_variables() if v.name.startswith('discriminator')]
    
  # Discriminator loss
  D_loss_real = tf.math.reduce_mean(Y_real)
  D_loss_fake = tf.math.reduce_mean(Y_fake)
  D_loss_fake_e = tf.math.reduce_mean(Y_fake_e)
  alpha = tf.random.uniform(
                            shape=[2*batch_size, 1, 1],
                            minval=0.,
                            maxval=1.
                            )
  real_data = tf.concat([H, H], axis=0)
  fake_data = tf.concat([H_hat, E_hat], axis=0)
  differences = fake_data - real_data
  interpolates = real_data + (alpha*differences)
  gradients = tf.gradients(tf.math.reduce_mean(discriminator(interpolates, T), axis=[1]), [interpolates])[0]
  slopes = tf.sqrt(tf.reduce_sum(tf.square(gradients), reduction_indices=[1, 2]))
  gradient_penalty = tf.reduce_mean((slopes-1.)**2)
  D_loss = -2*D_loss_real + D_loss_fake + gamma * D_loss_fake_e + 10 * gradient_penalty
  
            
  # Generator loss
  # 1. Adversarial loss
  G_loss_U = -tf.math.reduce_mean(Y_fake)
  G_loss_U_e = -tf.math.reduce_mean(Y_fake_e)
    
  # 2. Supervised loss
  G_loss_S = tf.losses.mean_squared_error(H[:,1:,:], H_hat_supervise[:,:-1,:])
    
  # 3. Two Momments
  G_loss_V1 = tf.reduce_mean(tf.abs(tf.sqrt(tf.nn.moments(X_hat,[0])[1] + 1e-6) - tf.sqrt(tf.nn.moments(X,[0])[1] + 1e-6)))
  G_loss_V2 = tf.reduce_mean(tf.abs((tf.nn.moments(X_hat,[0])[0]) - (tf.nn.moments(X,[0])[0])))
    
  G_loss_V = G_loss_V1 + G_loss_V2
    
  # 4. Summation
  G_loss = G_loss_U + gamma * G_loss_U_e + 100 * tf.sqrt(G_loss_S) + 100 * G_loss_V
            
  # Embedder network loss
  E_loss_T0 = tf.losses.mean_squared_error(X, X_tilde)
  E_loss0 = 10*tf.sqrt(E_loss_T0)
  E_loss = E_loss0  + 0.1*G_loss_S
    
  # optimizer
  E0_solver = tf.train.AdamOptimizer(
                                     learning_rate=1e-4,
                                     beta1=0.5,
                                     beta2=0.9
                                     ).minimize(E_loss0, var_list = e_vars + r_vars)
  E_solver = tf.train.AdamOptimizer(
                                    learning_rate=1e-4,
                                    beta1=0.5,
                                    beta2=0.9
                                    ).minimize(E_loss, var_list = e_vars + r_vars)
  D_solver = tf.train.AdamOptimizer(
                                    learning_rate=1e-4,
                                    beta1=0.5,
                                    beta2=0.9
                                    ).minimize(D_loss, var_list = d_vars)
  G_solver = tf.train.AdamOptimizer(
                                    learning_rate=1e-4,
                                    beta1=0.5,
                                    beta2=0.9
                                    ).minimize(G_loss, var_list = g_vars + s_vars)
  GS_solver = tf.train.AdamOptimizer(
                                     learning_rate=1e-4,
                                     beta1=0.5,
                                     beta2=0.9
                                     ).minimize(G_loss_S, var_list = g_vars + s_vars)
  
#  d_clip = [v.assign(tf.clip_by_value(v, -0.01, 0.01)) for v in d_vars]

  ## TimeGAN training
#  saver = tf.train.Saver()
  sess = tf.Session()
  sess.run(tf.global_variables_initializer())
#  saver.restore(sess, '/home/hideseek/seeker/hide-and-seek3/model/model.ckpt')

  # 1. Embedding network training
  print('Start Embedding Network Training')
#  st = time.time()
  for itt in range(iterations):
    # Set mini-batch
    X_mb, T_mb = batch_generator(ori_data, ori_time, batch_size)
    # Train embedder
    _, step_e_loss = sess.run([E0_solver, E_loss_T0], feed_dict={X: X_mb, T: T_mb})
    # Checkpoint
    if itt % 1000 == 0:
      print('step: '+ str(itt) + '/' + str(iterations) + ', e_loss: ' + str(np.round(np.sqrt(step_e_loss),4)) )

  print('Finish Embedding Network Training')
#  print(time.time()-st)
#  st = time.time()
  # 2. Training only with supervised loss
  print('Start Training with Supervised Loss Only')

  for itt in range(iterations):
    # Set mini-batch
    X_mb, T_mb = batch_generator(ori_data, ori_time, batch_size)
    # Random vector generation
    Z_mb = random_generator(batch_size, z_dim, T_mb, max_seq_len)
    # Train generator
    _, step_g_loss_s = sess.run([GS_solver, G_loss_S], feed_dict={Z: Z_mb, X: X_mb, T: T_mb})
    # Checkpoint
    if itt % 1000 == 0:
      print('step: '+ str(itt)  + '/' + str(iterations) +', s_loss: ' + str(np.round(np.sqrt(step_g_loss_s),4)) )

  print('Finish Training with Supervised Loss Only')
#  print(time.time()-st)
  # 3. Joint Training
  print('Start Joint Training')
#  st = time.time()
  for itt in range(iterations):
    # Generator training (twice more than discriminator training)
    for kk in range(2):
      # Set mini-batch
      X_mb, T_mb = batch_generator(ori_data, ori_time, batch_size)
      # Random vector generation
      Z_mb = random_generator(batch_size, z_dim, T_mb, max_seq_len)
      # Train generator
      _, step_g_loss_u, step_g_loss_s, step_g_loss_v = sess.run([G_solver, G_loss_U, G_loss_S, G_loss_V], feed_dict={Z: Z_mb, X: X_mb, T: T_mb})
       # Train embedder
      _, step_e_loss_t0 = sess.run([E_solver, E_loss_T0], feed_dict={Z: Z_mb, X: X_mb, T: T_mb})

    # Discriminator training
    # Set mini-batch
    X_mb, T_mb = batch_generator(ori_data, ori_time, batch_size)
    # Random vector generation
    Z_mb = random_generator(batch_size, z_dim, T_mb, max_seq_len)
    # Check discriminator loss before updating
#    check_d_loss = sess.run(D_loss, feed_dict={X: X_mb, T: T_mb, Z: Z_mb})
    # Train discriminator (only when the discriminator does not work well)
#    step_d_loss = check_d_loss
#    if (check_d_loss > -20):
#      _, step_d_loss = sess.run([D_solver, D_loss], feed_dict={X: X_mb, T: T_mb, Z: Z_mb})
#      _ = sess.run(d_clip)
    _, step_d_loss, step_d_loss_real, step_d_loss_fake, step_d_loss_fake_e = sess.run([D_solver, D_loss, D_loss_real, D_loss_fake, D_loss_fake_e], feed_dict={X: X_mb, T: T_mb, Z: Z_mb})
#    _ = sess.run(d_clip)

    # Print multiple checkpoints
#    if itt % 5000 == 0:
#      Z_mb = random_generator(no, z_dim, ori_time, max_seq_len)
#      generated_data_curr = sess.run(X_hat, feed_dict={Z: Z_mb, X: ori_data, T: ori_time})
#
#      generated_data = list()
#
#      for i in range(no):
#        temp = generated_data_curr[i,:ori_time[i],:]
#        generated_data.append(temp)
#      generated_data = generated_data * max_val
#      generated_data = generated_data + min_val
#      ori_step_ahead_pred_perf = one_step_ahead_prediction(train_data, test_data)
#      new_step_ahead_pred_perf = one_step_ahead_prediction(generated_data, test_data)
#
#      step_ahead_pred = [ori_step_ahead_pred_perf, new_step_ahead_pred_perf]
#
#      print('One step ahead prediction results: ' +
#            '(1) Ori: ' + str(np.round(ori_step_ahead_pred_perf, 4)) +
#            '(2) New: ' + str(np.round(new_step_ahead_pred_perf, 4)))
    if itt % 100 == 0:
      print('step: '+ str(itt) + '/' + str(iterations) +
            ', d_loss: ' + str(np.round(step_d_loss,4)) +
            ', d_loss_real: ' + str(np.round(step_d_loss_real,4)) +
            ', d_loss_fake: ' + str(np.round(step_d_loss_fake,4)) +
            ', d_loss_fake_e: ' + str(np.round(step_d_loss_fake_e,4)) +
            ', g_loss_u: ' + str(np.round(step_g_loss_u,4)) +
            ', g_loss_s: ' + str(np.round(np.sqrt(step_g_loss_s),4)) +
            ', g_loss_v: ' + str(np.round(step_g_loss_v,4)) +
            ', e_loss_t0: ' + str(np.round(np.sqrt(step_e_loss_t0),4))  )
  print('Finish Joint Training')
#  print(time.time()-st)

#  saver.save(sess, "./model/model.ckpt")

  ## Synthetic data generation
  Z_mb = random_generator(no, z_dim, ori_time, max_seq_len)
  generated_data_curr = sess.run(X_hat, feed_dict={Z: Z_mb, X: ori_data, T: ori_time})    
    
  generated_data = list()
    
  for i in range(no):
    temp = generated_data_curr[i,:ori_time[i],:]
    generated_data.append(temp)
        
  # Renormalization
  generated_data = generated_data * max_val
  generated_data = generated_data + min_val

  print('overall time')
  print(time.time() - start)

  return generated_data
